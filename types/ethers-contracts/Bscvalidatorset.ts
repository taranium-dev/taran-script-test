/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BscvalidatorsetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BC_FUSION_CHANNELID"
      | "BIND_CHANNELID"
      | "BLOCK_FEES_RATIO_SCALE"
      | "BURN_ADDRESS"
      | "CODE_OK"
      | "CROSS_CHAIN_CONTRACT_ADDR"
      | "CROSS_STAKE_CHANNELID"
      | "DUSTY_INCOMING"
      | "EPOCH"
      | "ERROR_FAIL_CHECK_VALIDATORS"
      | "ERROR_FAIL_DECODE"
      | "ERROR_LEN_OF_VAL_MISMATCH"
      | "ERROR_RELAYFEE_TOO_LARGE"
      | "ERROR_UNKNOWN_PACKAGE_TYPE"
      | "EXPIRE_TIME_SECOND_GAP"
      | "GOVERNOR_ADDR"
      | "GOV_CHANNELID"
      | "GOV_HUB_ADDR"
      | "GOV_TOKEN_ADDR"
      | "INCENTIVIZE_ADDR"
      | "INIT_BURN_RATIO"
      | "INIT_MAINTAIN_SLASH_SCALE"
      | "INIT_MAX_NUM_OF_MAINTAINING"
      | "INIT_NUM_OF_CABINETS"
      | "INIT_SYSTEM_REWARD_RATIO"
      | "INIT_VALIDATORSET_BYTES"
      | "JAIL_MESSAGE_TYPE"
      | "LIGHT_CLIENT_ADDR"
      | "MAX_NUM_OF_VALIDATORS"
      | "MAX_SYSTEM_REWARD_BALANCE"
      | "PRECISION"
      | "RELAYERHUB_CONTRACT_ADDR"
      | "SLASH_CHANNELID"
      | "SLASH_CONTRACT_ADDR"
      | "STAKE_CREDIT_ADDR"
      | "STAKE_HUB_ADDR"
      | "STAKING_CHANNELID"
      | "STAKING_CONTRACT_ADDR"
      | "SYSTEM_REWARD_ADDR"
      | "TIMELOCK_ADDR"
      | "TOKEN_HUB_ADDR"
      | "TOKEN_MANAGER_ADDR"
      | "TOKEN_RECOVER_PORTAL_ADDR"
      | "TRANSFER_IN_CHANNELID"
      | "TRANSFER_OUT_CHANNELID"
      | "VALIDATORS_UPDATE_MESSAGE_TYPE"
      | "VALIDATOR_CONTRACT_ADDR"
      | "alreadyInit"
      | "bscChainID"
      | "burnRatio"
      | "burnRatioInitialized"
      | "canEnterMaintenance"
      | "currentValidatorSet"
      | "currentValidatorSetMap"
      | "currentVoteAddrFullSet"
      | "deposit"
      | "distributeFinalityReward"
      | "enterMaintenance"
      | "exitMaintenance"
      | "expireTimeSecondGap"
      | "felony"
      | "getCurrentValidatorIndex"
      | "getIncoming"
      | "getLivingValidators"
      | "getMiningValidators"
      | "getTurnLength"
      | "getValidators"
      | "getWorkingValidatorCount"
      | "handleAckPackage"
      | "handleFailAckPackage"
      | "handleSynPackage"
      | "init"
      | "isCurrentValidator"
      | "isMonitoredForMaliciousVote"
      | "isSystemRewardIncluded"
      | "isWorkingValidator"
      | "maintainSlashScale"
      | "maxNumOfCandidates"
      | "maxNumOfMaintaining"
      | "maxNumOfWorkingCandidates"
      | "misdemeanor"
      | "numOfCabinets"
      | "numOfJailed"
      | "numOfMaintaining"
      | "previousBalanceOfSystemReward"
      | "previousHeight"
      | "previousVoteAddrFullSet"
      | "removeTmpMigratedValidator"
      | "systemRewardAntiMEVRatio"
      | "systemRewardBaseRatio"
      | "totalInComing"
      | "turnLength"
      | "updateParam"
      | "updateValidatorSetV2"
      | "validatorExtraSet"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "batchTransfer"
      | "batchTransferFailed"
      | "batchTransferLowerFailed"
      | "deprecatedDeposit"
      | "deprecatedFinalityRewardDeposit"
      | "directTransfer"
      | "directTransferFail"
      | "failReasonWithStr"
      | "feeBurned"
      | "finalityRewardDeposit"
      | "paramChange"
      | "systemTransfer"
      | "tmpValidatorSetUpdated"
      | "unexpectedPackage"
      | "validatorDeposit"
      | "validatorEmptyJailed"
      | "validatorEnterMaintenance"
      | "validatorExitMaintenance"
      | "validatorFelony"
      | "validatorJailed"
      | "validatorMisdemeanor"
      | "validatorSetUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BC_FUSION_CHANNELID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BIND_CHANNELID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLOCK_FEES_RATIO_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BURN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CODE_OK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CROSS_CHAIN_CONTRACT_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CROSS_STAKE_CHANNELID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DUSTY_INCOMING",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "EPOCH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ERROR_FAIL_CHECK_VALIDATORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_FAIL_DECODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_LEN_OF_VAL_MISMATCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_RELAYFEE_TOO_LARGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERROR_UNKNOWN_PACKAGE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXPIRE_TIME_SECOND_GAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNOR_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOV_CHANNELID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOV_HUB_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOV_TOKEN_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INCENTIVIZE_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INIT_BURN_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INIT_MAINTAIN_SLASH_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INIT_MAX_NUM_OF_MAINTAINING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INIT_NUM_OF_CABINETS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INIT_SYSTEM_REWARD_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INIT_VALIDATORSET_BYTES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JAIL_MESSAGE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIGHT_CLIENT_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_NUM_OF_VALIDATORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SYSTEM_REWARD_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RELAYERHUB_CONTRACT_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLASH_CHANNELID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLASH_CONTRACT_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_CREDIT_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_HUB_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_CHANNELID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_CONTRACT_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYSTEM_REWARD_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIMELOCK_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_HUB_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_MANAGER_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_RECOVER_PORTAL_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_IN_CHANNELID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_OUT_CHANNELID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATORS_UPDATE_MESSAGE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_CONTRACT_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "alreadyInit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bscChainID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burnRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnRatioInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canEnterMaintenance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentValidatorSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentValidatorSetMap",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentVoteAddrFullSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFinalityReward",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMaintenance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exitMaintenance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expireTimeSecondGap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "felony", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getCurrentValidatorIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncoming",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLivingValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMiningValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTurnLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkingValidatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleAckPackage",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFailAckPackage",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleSynPackage",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isCurrentValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMonitoredForMaliciousVote",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSystemRewardIncluded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWorkingValidator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maintainSlashScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxNumOfCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxNumOfMaintaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxNumOfWorkingCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "misdemeanor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numOfCabinets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numOfJailed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numOfMaintaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousBalanceOfSystemReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previousVoteAddrFullSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTmpMigratedValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "systemRewardAntiMEVRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "systemRewardBaseRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalInComing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "turnLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateParam",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateValidatorSetV2",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorExtraSet",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BC_FUSION_CHANNELID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BIND_CHANNELID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BLOCK_FEES_RATIO_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BURN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CODE_OK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CROSS_CHAIN_CONTRACT_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CROSS_STAKE_CHANNELID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DUSTY_INCOMING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "EPOCH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_FAIL_CHECK_VALIDATORS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_FAIL_DECODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_LEN_OF_VAL_MISMATCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_RELAYFEE_TOO_LARGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERROR_UNKNOWN_PACKAGE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXPIRE_TIME_SECOND_GAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNOR_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOV_CHANNELID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOV_HUB_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOV_TOKEN_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INCENTIVIZE_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INIT_BURN_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INIT_MAINTAIN_SLASH_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INIT_MAX_NUM_OF_MAINTAINING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INIT_NUM_OF_CABINETS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INIT_SYSTEM_REWARD_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INIT_VALIDATORSET_BYTES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "JAIL_MESSAGE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIGHT_CLIENT_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_NUM_OF_VALIDATORS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SYSTEM_REWARD_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RELAYERHUB_CONTRACT_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SLASH_CHANNELID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SLASH_CONTRACT_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_CREDIT_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_HUB_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_CHANNELID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_CONTRACT_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYSTEM_REWARD_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIMELOCK_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_HUB_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_MANAGER_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_RECOVER_PORTAL_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_IN_CHANNELID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_OUT_CHANNELID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATORS_UPDATE_MESSAGE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_CONTRACT_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "alreadyInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bscChainID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnRatioInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canEnterMaintenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentValidatorSetMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentVoteAddrFullSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeFinalityReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMaintenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitMaintenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireTimeSecondGap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "felony", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentValidatorIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncoming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLivingValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMiningValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTurnLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkingValidatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleAckPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleFailAckPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleSynPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCurrentValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMonitoredForMaliciousVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSystemRewardIncluded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWorkingValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintainSlashScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNumOfCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNumOfMaintaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNumOfWorkingCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "misdemeanor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numOfCabinets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numOfJailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numOfMaintaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousBalanceOfSystemReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousVoteAddrFullSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTmpMigratedValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemRewardAntiMEVRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemRewardBaseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalInComing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "turnLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValidatorSetV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorExtraSet",
    data: BytesLike
  ): Result;
}

export namespace batchTransferEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace batchTransferFailedEvent {
  export type InputTuple = [amount: BigNumberish, reason: string];
  export type OutputTuple = [amount: bigint, reason: string];
  export interface OutputObject {
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace batchTransferLowerFailedEvent {
  export type InputTuple = [amount: BigNumberish, reason: BytesLike];
  export type OutputTuple = [amount: bigint, reason: string];
  export interface OutputObject {
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace deprecatedDepositEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace deprecatedFinalityRewardDepositEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace directTransferEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace directTransferFailEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace failReasonWithStrEvent {
  export type InputTuple = [message: string];
  export type OutputTuple = [message: string];
  export interface OutputObject {
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace feeBurnedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace finalityRewardDepositEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace paramChangeEvent {
  export type InputTuple = [key: string, value: BytesLike];
  export type OutputTuple = [key: string, value: string];
  export interface OutputObject {
    key: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace systemTransferEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace tmpValidatorSetUpdatedEvent {
  export type InputTuple = [validatorsNum: BigNumberish];
  export type OutputTuple = [validatorsNum: bigint];
  export interface OutputObject {
    validatorsNum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace unexpectedPackageEvent {
  export type InputTuple = [channelId: BigNumberish, msgBytes: BytesLike];
  export type OutputTuple = [channelId: bigint, msgBytes: string];
  export interface OutputObject {
    channelId: bigint;
    msgBytes: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace validatorDepositEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace validatorEmptyJailedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace validatorEnterMaintenanceEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace validatorExitMaintenanceEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace validatorFelonyEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace validatorJailedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace validatorMisdemeanorEvent {
  export type InputTuple = [validator: AddressLike, amount: BigNumberish];
  export type OutputTuple = [validator: string, amount: bigint];
  export interface OutputObject {
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace validatorSetUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bscvalidatorset extends BaseContract {
  connect(runner?: ContractRunner | null): Bscvalidatorset;
  waitForDeployment(): Promise<this>;

  interface: BscvalidatorsetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BC_FUSION_CHANNELID: TypedContractMethod<[], [bigint], "view">;

  BIND_CHANNELID: TypedContractMethod<[], [bigint], "view">;

  BLOCK_FEES_RATIO_SCALE: TypedContractMethod<[], [bigint], "view">;

  BURN_ADDRESS: TypedContractMethod<[], [string], "view">;

  CODE_OK: TypedContractMethod<[], [bigint], "view">;

  CROSS_CHAIN_CONTRACT_ADDR: TypedContractMethod<[], [string], "view">;

  CROSS_STAKE_CHANNELID: TypedContractMethod<[], [bigint], "view">;

  DUSTY_INCOMING: TypedContractMethod<[], [bigint], "view">;

  EPOCH: TypedContractMethod<[], [bigint], "view">;

  ERROR_FAIL_CHECK_VALIDATORS: TypedContractMethod<[], [bigint], "view">;

  ERROR_FAIL_DECODE: TypedContractMethod<[], [bigint], "view">;

  ERROR_LEN_OF_VAL_MISMATCH: TypedContractMethod<[], [bigint], "view">;

  ERROR_RELAYFEE_TOO_LARGE: TypedContractMethod<[], [bigint], "view">;

  ERROR_UNKNOWN_PACKAGE_TYPE: TypedContractMethod<[], [bigint], "view">;

  EXPIRE_TIME_SECOND_GAP: TypedContractMethod<[], [bigint], "view">;

  GOVERNOR_ADDR: TypedContractMethod<[], [string], "view">;

  GOV_CHANNELID: TypedContractMethod<[], [bigint], "view">;

  GOV_HUB_ADDR: TypedContractMethod<[], [string], "view">;

  GOV_TOKEN_ADDR: TypedContractMethod<[], [string], "view">;

  INCENTIVIZE_ADDR: TypedContractMethod<[], [string], "view">;

  INIT_BURN_RATIO: TypedContractMethod<[], [bigint], "view">;

  INIT_MAINTAIN_SLASH_SCALE: TypedContractMethod<[], [bigint], "view">;

  INIT_MAX_NUM_OF_MAINTAINING: TypedContractMethod<[], [bigint], "view">;

  INIT_NUM_OF_CABINETS: TypedContractMethod<[], [bigint], "view">;

  INIT_SYSTEM_REWARD_RATIO: TypedContractMethod<[], [bigint], "view">;

  INIT_VALIDATORSET_BYTES: TypedContractMethod<[], [string], "view">;

  JAIL_MESSAGE_TYPE: TypedContractMethod<[], [bigint], "view">;

  LIGHT_CLIENT_ADDR: TypedContractMethod<[], [string], "view">;

  MAX_NUM_OF_VALIDATORS: TypedContractMethod<[], [bigint], "view">;

  MAX_SYSTEM_REWARD_BALANCE: TypedContractMethod<[], [bigint], "view">;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  RELAYERHUB_CONTRACT_ADDR: TypedContractMethod<[], [string], "view">;

  SLASH_CHANNELID: TypedContractMethod<[], [bigint], "view">;

  SLASH_CONTRACT_ADDR: TypedContractMethod<[], [string], "view">;

  STAKE_CREDIT_ADDR: TypedContractMethod<[], [string], "view">;

  STAKE_HUB_ADDR: TypedContractMethod<[], [string], "view">;

  STAKING_CHANNELID: TypedContractMethod<[], [bigint], "view">;

  STAKING_CONTRACT_ADDR: TypedContractMethod<[], [string], "view">;

  SYSTEM_REWARD_ADDR: TypedContractMethod<[], [string], "view">;

  TIMELOCK_ADDR: TypedContractMethod<[], [string], "view">;

  TOKEN_HUB_ADDR: TypedContractMethod<[], [string], "view">;

  TOKEN_MANAGER_ADDR: TypedContractMethod<[], [string], "view">;

  TOKEN_RECOVER_PORTAL_ADDR: TypedContractMethod<[], [string], "view">;

  TRANSFER_IN_CHANNELID: TypedContractMethod<[], [bigint], "view">;

  TRANSFER_OUT_CHANNELID: TypedContractMethod<[], [bigint], "view">;

  VALIDATORS_UPDATE_MESSAGE_TYPE: TypedContractMethod<[], [bigint], "view">;

  VALIDATOR_CONTRACT_ADDR: TypedContractMethod<[], [string], "view">;

  alreadyInit: TypedContractMethod<[], [boolean], "view">;

  bscChainID: TypedContractMethod<[], [bigint], "view">;

  burnRatio: TypedContractMethod<[], [bigint], "view">;

  burnRatioInitialized: TypedContractMethod<[], [boolean], "view">;

  canEnterMaintenance: TypedContractMethod<
    [index: BigNumberish],
    [boolean],
    "view"
  >;

  currentValidatorSet: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        consensusAddress: string;
        feeAddress: string;
        BBCFeeAddress: string;
        votingPower: bigint;
        jailed: boolean;
        incoming: bigint;
      }
    ],
    "view"
  >;

  currentValidatorSetMap: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  currentVoteAddrFullSet: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  deposit: TypedContractMethod<[valAddr: AddressLike], [void], "payable">;

  distributeFinalityReward: TypedContractMethod<
    [valAddrs: AddressLike[], weights: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  enterMaintenance: TypedContractMethod<[], [void], "nonpayable">;

  exitMaintenance: TypedContractMethod<[], [void], "nonpayable">;

  expireTimeSecondGap: TypedContractMethod<[], [bigint], "view">;

  felony: TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;

  getCurrentValidatorIndex: TypedContractMethod<
    [validator: AddressLike],
    [bigint],
    "view"
  >;

  getIncoming: TypedContractMethod<[validator: AddressLike], [bigint], "view">;

  getLivingValidators: TypedContractMethod<[], [[string[], string[]]], "view">;

  getMiningValidators: TypedContractMethod<[], [[string[], string[]]], "view">;

  getTurnLength: TypedContractMethod<[], [bigint], "view">;

  getValidators: TypedContractMethod<[], [string[]], "view">;

  getWorkingValidatorCount: TypedContractMethod<[], [bigint], "view">;

  handleAckPackage: TypedContractMethod<
    [channelId: BigNumberish, msgBytes: BytesLike],
    [void],
    "nonpayable"
  >;

  handleFailAckPackage: TypedContractMethod<
    [channelId: BigNumberish, msgBytes: BytesLike],
    [void],
    "nonpayable"
  >;

  handleSynPackage: TypedContractMethod<
    [arg0: BigNumberish, msgBytes: BytesLike],
    [string],
    "nonpayable"
  >;

  init: TypedContractMethod<[], [void], "nonpayable">;

  isCurrentValidator: TypedContractMethod<
    [validator: AddressLike],
    [boolean],
    "view"
  >;

  isMonitoredForMaliciousVote: TypedContractMethod<
    [voteAddr: BytesLike],
    [boolean],
    "view"
  >;

  isSystemRewardIncluded: TypedContractMethod<[], [boolean], "view">;

  isWorkingValidator: TypedContractMethod<
    [index: BigNumberish],
    [boolean],
    "view"
  >;

  maintainSlashScale: TypedContractMethod<[], [bigint], "view">;

  maxNumOfCandidates: TypedContractMethod<[], [bigint], "view">;

  maxNumOfMaintaining: TypedContractMethod<[], [bigint], "view">;

  maxNumOfWorkingCandidates: TypedContractMethod<[], [bigint], "view">;

  misdemeanor: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  numOfCabinets: TypedContractMethod<[], [bigint], "view">;

  numOfJailed: TypedContractMethod<[], [bigint], "view">;

  numOfMaintaining: TypedContractMethod<[], [bigint], "view">;

  previousBalanceOfSystemReward: TypedContractMethod<[], [bigint], "view">;

  previousHeight: TypedContractMethod<[], [bigint], "view">;

  previousVoteAddrFullSet: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  removeTmpMigratedValidator: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  systemRewardAntiMEVRatio: TypedContractMethod<[], [bigint], "view">;

  systemRewardBaseRatio: TypedContractMethod<[], [bigint], "view">;

  totalInComing: TypedContractMethod<[], [bigint], "view">;

  turnLength: TypedContractMethod<[], [bigint], "view">;

  updateParam: TypedContractMethod<
    [key: string, value: BytesLike],
    [void],
    "nonpayable"
  >;

  updateValidatorSetV2: TypedContractMethod<
    [
      _consensusAddrs: AddressLike[],
      _votingPowers: BigNumberish[],
      _voteAddrs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  validatorExtraSet: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, boolean, string] & {
        enterMaintenanceHeight: bigint;
        isMaintaining: boolean;
        voteAddress: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BC_FUSION_CHANNELID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BIND_CHANNELID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BLOCK_FEES_RATIO_SCALE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BURN_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CODE_OK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CROSS_CHAIN_CONTRACT_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CROSS_STAKE_CHANNELID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DUSTY_INCOMING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EPOCH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_FAIL_CHECK_VALIDATORS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_FAIL_DECODE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_LEN_OF_VAL_MISMATCH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_RELAYFEE_TOO_LARGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ERROR_UNKNOWN_PACKAGE_TYPE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EXPIRE_TIME_SECOND_GAP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOVERNOR_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GOV_CHANNELID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOV_HUB_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GOV_TOKEN_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INCENTIVIZE_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "INIT_BURN_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INIT_MAINTAIN_SLASH_SCALE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INIT_MAX_NUM_OF_MAINTAINING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INIT_NUM_OF_CABINETS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INIT_SYSTEM_REWARD_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INIT_VALIDATORSET_BYTES"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "JAIL_MESSAGE_TYPE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LIGHT_CLIENT_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_NUM_OF_VALIDATORS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SYSTEM_REWARD_BALANCE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RELAYERHUB_CONTRACT_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SLASH_CHANNELID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SLASH_CONTRACT_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STAKE_CREDIT_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STAKE_HUB_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STAKING_CHANNELID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STAKING_CONTRACT_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SYSTEM_REWARD_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TIMELOCK_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOKEN_HUB_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOKEN_MANAGER_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOKEN_RECOVER_PORTAL_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRANSFER_IN_CHANNELID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TRANSFER_OUT_CHANNELID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATORS_UPDATE_MESSAGE_TYPE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_CONTRACT_ADDR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "alreadyInit"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "bscChainID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnRatioInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "canEnterMaintenance"
  ): TypedContractMethod<[index: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "currentValidatorSet"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        consensusAddress: string;
        feeAddress: string;
        BBCFeeAddress: string;
        votingPower: bigint;
        jailed: boolean;
        incoming: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentValidatorSetMap"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentVoteAddrFullSet"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[valAddr: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "distributeFinalityReward"
  ): TypedContractMethod<
    [valAddrs: AddressLike[], weights: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enterMaintenance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exitMaintenance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expireTimeSecondGap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "felony"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentValidatorIndex"
  ): TypedContractMethod<[validator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIncoming"
  ): TypedContractMethod<[validator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLivingValidators"
  ): TypedContractMethod<[], [[string[], string[]]], "view">;
  getFunction(
    nameOrSignature: "getMiningValidators"
  ): TypedContractMethod<[], [[string[], string[]]], "view">;
  getFunction(
    nameOrSignature: "getTurnLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValidators"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWorkingValidatorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleAckPackage"
  ): TypedContractMethod<
    [channelId: BigNumberish, msgBytes: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleFailAckPackage"
  ): TypedContractMethod<
    [channelId: BigNumberish, msgBytes: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleSynPackage"
  ): TypedContractMethod<
    [arg0: BigNumberish, msgBytes: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isCurrentValidator"
  ): TypedContractMethod<[validator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMonitoredForMaliciousVote"
  ): TypedContractMethod<[voteAddr: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSystemRewardIncluded"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWorkingValidator"
  ): TypedContractMethod<[index: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maintainSlashScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxNumOfCandidates"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxNumOfMaintaining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxNumOfWorkingCandidates"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "misdemeanor"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "numOfCabinets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numOfJailed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numOfMaintaining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "previousBalanceOfSystemReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "previousHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "previousVoteAddrFullSet"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeTmpMigratedValidator"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "systemRewardAntiMEVRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "systemRewardBaseRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalInComing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "turnLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateParam"
  ): TypedContractMethod<[key: string, value: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateValidatorSetV2"
  ): TypedContractMethod<
    [
      _consensusAddrs: AddressLike[],
      _votingPowers: BigNumberish[],
      _voteAddrs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validatorExtraSet"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, boolean, string] & {
        enterMaintenanceHeight: bigint;
        isMaintaining: boolean;
        voteAddress: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "batchTransfer"
  ): TypedContractEvent<
    batchTransferEvent.InputTuple,
    batchTransferEvent.OutputTuple,
    batchTransferEvent.OutputObject
  >;
  getEvent(
    key: "batchTransferFailed"
  ): TypedContractEvent<
    batchTransferFailedEvent.InputTuple,
    batchTransferFailedEvent.OutputTuple,
    batchTransferFailedEvent.OutputObject
  >;
  getEvent(
    key: "batchTransferLowerFailed"
  ): TypedContractEvent<
    batchTransferLowerFailedEvent.InputTuple,
    batchTransferLowerFailedEvent.OutputTuple,
    batchTransferLowerFailedEvent.OutputObject
  >;
  getEvent(
    key: "deprecatedDeposit"
  ): TypedContractEvent<
    deprecatedDepositEvent.InputTuple,
    deprecatedDepositEvent.OutputTuple,
    deprecatedDepositEvent.OutputObject
  >;
  getEvent(
    key: "deprecatedFinalityRewardDeposit"
  ): TypedContractEvent<
    deprecatedFinalityRewardDepositEvent.InputTuple,
    deprecatedFinalityRewardDepositEvent.OutputTuple,
    deprecatedFinalityRewardDepositEvent.OutputObject
  >;
  getEvent(
    key: "directTransfer"
  ): TypedContractEvent<
    directTransferEvent.InputTuple,
    directTransferEvent.OutputTuple,
    directTransferEvent.OutputObject
  >;
  getEvent(
    key: "directTransferFail"
  ): TypedContractEvent<
    directTransferFailEvent.InputTuple,
    directTransferFailEvent.OutputTuple,
    directTransferFailEvent.OutputObject
  >;
  getEvent(
    key: "failReasonWithStr"
  ): TypedContractEvent<
    failReasonWithStrEvent.InputTuple,
    failReasonWithStrEvent.OutputTuple,
    failReasonWithStrEvent.OutputObject
  >;
  getEvent(
    key: "feeBurned"
  ): TypedContractEvent<
    feeBurnedEvent.InputTuple,
    feeBurnedEvent.OutputTuple,
    feeBurnedEvent.OutputObject
  >;
  getEvent(
    key: "finalityRewardDeposit"
  ): TypedContractEvent<
    finalityRewardDepositEvent.InputTuple,
    finalityRewardDepositEvent.OutputTuple,
    finalityRewardDepositEvent.OutputObject
  >;
  getEvent(
    key: "paramChange"
  ): TypedContractEvent<
    paramChangeEvent.InputTuple,
    paramChangeEvent.OutputTuple,
    paramChangeEvent.OutputObject
  >;
  getEvent(
    key: "systemTransfer"
  ): TypedContractEvent<
    systemTransferEvent.InputTuple,
    systemTransferEvent.OutputTuple,
    systemTransferEvent.OutputObject
  >;
  getEvent(
    key: "tmpValidatorSetUpdated"
  ): TypedContractEvent<
    tmpValidatorSetUpdatedEvent.InputTuple,
    tmpValidatorSetUpdatedEvent.OutputTuple,
    tmpValidatorSetUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "unexpectedPackage"
  ): TypedContractEvent<
    unexpectedPackageEvent.InputTuple,
    unexpectedPackageEvent.OutputTuple,
    unexpectedPackageEvent.OutputObject
  >;
  getEvent(
    key: "validatorDeposit"
  ): TypedContractEvent<
    validatorDepositEvent.InputTuple,
    validatorDepositEvent.OutputTuple,
    validatorDepositEvent.OutputObject
  >;
  getEvent(
    key: "validatorEmptyJailed"
  ): TypedContractEvent<
    validatorEmptyJailedEvent.InputTuple,
    validatorEmptyJailedEvent.OutputTuple,
    validatorEmptyJailedEvent.OutputObject
  >;
  getEvent(
    key: "validatorEnterMaintenance"
  ): TypedContractEvent<
    validatorEnterMaintenanceEvent.InputTuple,
    validatorEnterMaintenanceEvent.OutputTuple,
    validatorEnterMaintenanceEvent.OutputObject
  >;
  getEvent(
    key: "validatorExitMaintenance"
  ): TypedContractEvent<
    validatorExitMaintenanceEvent.InputTuple,
    validatorExitMaintenanceEvent.OutputTuple,
    validatorExitMaintenanceEvent.OutputObject
  >;
  getEvent(
    key: "validatorFelony"
  ): TypedContractEvent<
    validatorFelonyEvent.InputTuple,
    validatorFelonyEvent.OutputTuple,
    validatorFelonyEvent.OutputObject
  >;
  getEvent(
    key: "validatorJailed"
  ): TypedContractEvent<
    validatorJailedEvent.InputTuple,
    validatorJailedEvent.OutputTuple,
    validatorJailedEvent.OutputObject
  >;
  getEvent(
    key: "validatorMisdemeanor"
  ): TypedContractEvent<
    validatorMisdemeanorEvent.InputTuple,
    validatorMisdemeanorEvent.OutputTuple,
    validatorMisdemeanorEvent.OutputObject
  >;
  getEvent(
    key: "validatorSetUpdated"
  ): TypedContractEvent<
    validatorSetUpdatedEvent.InputTuple,
    validatorSetUpdatedEvent.OutputTuple,
    validatorSetUpdatedEvent.OutputObject
  >;

  filters: {
    "batchTransfer(uint256)": TypedContractEvent<
      batchTransferEvent.InputTuple,
      batchTransferEvent.OutputTuple,
      batchTransferEvent.OutputObject
    >;
    batchTransfer: TypedContractEvent<
      batchTransferEvent.InputTuple,
      batchTransferEvent.OutputTuple,
      batchTransferEvent.OutputObject
    >;

    "batchTransferFailed(uint256,string)": TypedContractEvent<
      batchTransferFailedEvent.InputTuple,
      batchTransferFailedEvent.OutputTuple,
      batchTransferFailedEvent.OutputObject
    >;
    batchTransferFailed: TypedContractEvent<
      batchTransferFailedEvent.InputTuple,
      batchTransferFailedEvent.OutputTuple,
      batchTransferFailedEvent.OutputObject
    >;

    "batchTransferLowerFailed(uint256,bytes)": TypedContractEvent<
      batchTransferLowerFailedEvent.InputTuple,
      batchTransferLowerFailedEvent.OutputTuple,
      batchTransferLowerFailedEvent.OutputObject
    >;
    batchTransferLowerFailed: TypedContractEvent<
      batchTransferLowerFailedEvent.InputTuple,
      batchTransferLowerFailedEvent.OutputTuple,
      batchTransferLowerFailedEvent.OutputObject
    >;

    "deprecatedDeposit(address,uint256)": TypedContractEvent<
      deprecatedDepositEvent.InputTuple,
      deprecatedDepositEvent.OutputTuple,
      deprecatedDepositEvent.OutputObject
    >;
    deprecatedDeposit: TypedContractEvent<
      deprecatedDepositEvent.InputTuple,
      deprecatedDepositEvent.OutputTuple,
      deprecatedDepositEvent.OutputObject
    >;

    "deprecatedFinalityRewardDeposit(address,uint256)": TypedContractEvent<
      deprecatedFinalityRewardDepositEvent.InputTuple,
      deprecatedFinalityRewardDepositEvent.OutputTuple,
      deprecatedFinalityRewardDepositEvent.OutputObject
    >;
    deprecatedFinalityRewardDeposit: TypedContractEvent<
      deprecatedFinalityRewardDepositEvent.InputTuple,
      deprecatedFinalityRewardDepositEvent.OutputTuple,
      deprecatedFinalityRewardDepositEvent.OutputObject
    >;

    "directTransfer(address,uint256)": TypedContractEvent<
      directTransferEvent.InputTuple,
      directTransferEvent.OutputTuple,
      directTransferEvent.OutputObject
    >;
    directTransfer: TypedContractEvent<
      directTransferEvent.InputTuple,
      directTransferEvent.OutputTuple,
      directTransferEvent.OutputObject
    >;

    "directTransferFail(address,uint256)": TypedContractEvent<
      directTransferFailEvent.InputTuple,
      directTransferFailEvent.OutputTuple,
      directTransferFailEvent.OutputObject
    >;
    directTransferFail: TypedContractEvent<
      directTransferFailEvent.InputTuple,
      directTransferFailEvent.OutputTuple,
      directTransferFailEvent.OutputObject
    >;

    "failReasonWithStr(string)": TypedContractEvent<
      failReasonWithStrEvent.InputTuple,
      failReasonWithStrEvent.OutputTuple,
      failReasonWithStrEvent.OutputObject
    >;
    failReasonWithStr: TypedContractEvent<
      failReasonWithStrEvent.InputTuple,
      failReasonWithStrEvent.OutputTuple,
      failReasonWithStrEvent.OutputObject
    >;

    "feeBurned(uint256)": TypedContractEvent<
      feeBurnedEvent.InputTuple,
      feeBurnedEvent.OutputTuple,
      feeBurnedEvent.OutputObject
    >;
    feeBurned: TypedContractEvent<
      feeBurnedEvent.InputTuple,
      feeBurnedEvent.OutputTuple,
      feeBurnedEvent.OutputObject
    >;

    "finalityRewardDeposit(address,uint256)": TypedContractEvent<
      finalityRewardDepositEvent.InputTuple,
      finalityRewardDepositEvent.OutputTuple,
      finalityRewardDepositEvent.OutputObject
    >;
    finalityRewardDeposit: TypedContractEvent<
      finalityRewardDepositEvent.InputTuple,
      finalityRewardDepositEvent.OutputTuple,
      finalityRewardDepositEvent.OutputObject
    >;

    "paramChange(string,bytes)": TypedContractEvent<
      paramChangeEvent.InputTuple,
      paramChangeEvent.OutputTuple,
      paramChangeEvent.OutputObject
    >;
    paramChange: TypedContractEvent<
      paramChangeEvent.InputTuple,
      paramChangeEvent.OutputTuple,
      paramChangeEvent.OutputObject
    >;

    "systemTransfer(uint256)": TypedContractEvent<
      systemTransferEvent.InputTuple,
      systemTransferEvent.OutputTuple,
      systemTransferEvent.OutputObject
    >;
    systemTransfer: TypedContractEvent<
      systemTransferEvent.InputTuple,
      systemTransferEvent.OutputTuple,
      systemTransferEvent.OutputObject
    >;

    "tmpValidatorSetUpdated(uint256)": TypedContractEvent<
      tmpValidatorSetUpdatedEvent.InputTuple,
      tmpValidatorSetUpdatedEvent.OutputTuple,
      tmpValidatorSetUpdatedEvent.OutputObject
    >;
    tmpValidatorSetUpdated: TypedContractEvent<
      tmpValidatorSetUpdatedEvent.InputTuple,
      tmpValidatorSetUpdatedEvent.OutputTuple,
      tmpValidatorSetUpdatedEvent.OutputObject
    >;

    "unexpectedPackage(uint8,bytes)": TypedContractEvent<
      unexpectedPackageEvent.InputTuple,
      unexpectedPackageEvent.OutputTuple,
      unexpectedPackageEvent.OutputObject
    >;
    unexpectedPackage: TypedContractEvent<
      unexpectedPackageEvent.InputTuple,
      unexpectedPackageEvent.OutputTuple,
      unexpectedPackageEvent.OutputObject
    >;

    "validatorDeposit(address,uint256)": TypedContractEvent<
      validatorDepositEvent.InputTuple,
      validatorDepositEvent.OutputTuple,
      validatorDepositEvent.OutputObject
    >;
    validatorDeposit: TypedContractEvent<
      validatorDepositEvent.InputTuple,
      validatorDepositEvent.OutputTuple,
      validatorDepositEvent.OutputObject
    >;

    "validatorEmptyJailed(address)": TypedContractEvent<
      validatorEmptyJailedEvent.InputTuple,
      validatorEmptyJailedEvent.OutputTuple,
      validatorEmptyJailedEvent.OutputObject
    >;
    validatorEmptyJailed: TypedContractEvent<
      validatorEmptyJailedEvent.InputTuple,
      validatorEmptyJailedEvent.OutputTuple,
      validatorEmptyJailedEvent.OutputObject
    >;

    "validatorEnterMaintenance(address)": TypedContractEvent<
      validatorEnterMaintenanceEvent.InputTuple,
      validatorEnterMaintenanceEvent.OutputTuple,
      validatorEnterMaintenanceEvent.OutputObject
    >;
    validatorEnterMaintenance: TypedContractEvent<
      validatorEnterMaintenanceEvent.InputTuple,
      validatorEnterMaintenanceEvent.OutputTuple,
      validatorEnterMaintenanceEvent.OutputObject
    >;

    "validatorExitMaintenance(address)": TypedContractEvent<
      validatorExitMaintenanceEvent.InputTuple,
      validatorExitMaintenanceEvent.OutputTuple,
      validatorExitMaintenanceEvent.OutputObject
    >;
    validatorExitMaintenance: TypedContractEvent<
      validatorExitMaintenanceEvent.InputTuple,
      validatorExitMaintenanceEvent.OutputTuple,
      validatorExitMaintenanceEvent.OutputObject
    >;

    "validatorFelony(address,uint256)": TypedContractEvent<
      validatorFelonyEvent.InputTuple,
      validatorFelonyEvent.OutputTuple,
      validatorFelonyEvent.OutputObject
    >;
    validatorFelony: TypedContractEvent<
      validatorFelonyEvent.InputTuple,
      validatorFelonyEvent.OutputTuple,
      validatorFelonyEvent.OutputObject
    >;

    "validatorJailed(address)": TypedContractEvent<
      validatorJailedEvent.InputTuple,
      validatorJailedEvent.OutputTuple,
      validatorJailedEvent.OutputObject
    >;
    validatorJailed: TypedContractEvent<
      validatorJailedEvent.InputTuple,
      validatorJailedEvent.OutputTuple,
      validatorJailedEvent.OutputObject
    >;

    "validatorMisdemeanor(address,uint256)": TypedContractEvent<
      validatorMisdemeanorEvent.InputTuple,
      validatorMisdemeanorEvent.OutputTuple,
      validatorMisdemeanorEvent.OutputObject
    >;
    validatorMisdemeanor: TypedContractEvent<
      validatorMisdemeanorEvent.InputTuple,
      validatorMisdemeanorEvent.OutputTuple,
      validatorMisdemeanorEvent.OutputObject
    >;

    "validatorSetUpdated()": TypedContractEvent<
      validatorSetUpdatedEvent.InputTuple,
      validatorSetUpdatedEvent.OutputTuple,
      validatorSetUpdatedEvent.OutputObject
    >;
    validatorSetUpdated: TypedContractEvent<
      validatorSetUpdatedEvent.InputTuple,
      validatorSetUpdatedEvent.OutputTuple,
      validatorSetUpdatedEvent.OutputObject
    >;
  };
}
