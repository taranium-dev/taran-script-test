/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace StakeHub {
  export type CommissionStruct = {
    rate: BigNumberish;
    maxRate: BigNumberish;
    maxChangeRate: BigNumberish;
  };

  export type CommissionStructOutput = [
    rate: bigint,
    maxRate: bigint,
    maxChangeRate: bigint
  ] & { rate: bigint; maxRate: bigint; maxChangeRate: bigint };

  export type DescriptionStruct = {
    moniker: string;
    identity: string;
    website: string;
    details: string;
  };

  export type DescriptionStructOutput = [
    moniker: string,
    identity: string,
    website: string,
    details: string
  ] & { moniker: string; identity: string; website: string; details: string };
}

export interface StakehubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BC_FUSION_CHANNELID"
      | "BREATHE_BLOCK_INTERVAL"
      | "DEAD_ADDRESS"
      | "LOCK_AMOUNT"
      | "REDELEGATE_FEE_RATE_BASE"
      | "STAKING_CHANNELID"
      | "addToBlackList"
      | "agentToOperator"
      | "blackList"
      | "claim"
      | "claimBatch"
      | "consensusExpiration"
      | "consensusToOperator"
      | "createValidator"
      | "delegate"
      | "distributeReward"
      | "doubleSignSlash"
      | "downtimeJailTime"
      | "downtimeSlash"
      | "downtimeSlashAmount"
      | "editCommissionRate"
      | "editConsensusAddress"
      | "editDescription"
      | "editVoteAddress"
      | "felonyJailTime"
      | "felonySlashAmount"
      | "getValidatorAgent"
      | "getValidatorBasicInfo"
      | "getValidatorCommission"
      | "getValidatorConsensusAddress"
      | "getValidatorCreditContract"
      | "getValidatorDescription"
      | "getValidatorElectionInfo"
      | "getValidatorRewardRecord"
      | "getValidatorTotalPooledBNBRecord"
      | "getValidatorVoteAddress"
      | "getValidators"
      | "handleAckPackage"
      | "handleFailAckPackage"
      | "handleSynPackage"
      | "initialize"
      | "isPaused"
      | "maliciousVoteSlash"
      | "maxElectedValidators"
      | "maxFelonyBetweenBreatheBlock"
      | "minDelegationBNBChange"
      | "minSelfDelegationBNB"
      | "numOfJailed"
      | "pause"
      | "redelegate"
      | "redelegateFeeRate"
      | "removeFromBlackList"
      | "resume"
      | "syncGovToken"
      | "transferGasLimit"
      | "unbondPeriod"
      | "undelegate"
      | "unjail"
      | "updateAgent"
      | "updateParam"
      | "voteExpiration"
      | "voteToOperator"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentChanged"
      | "BlackListed"
      | "Claimed"
      | "CommissionRateEdited"
      | "ConsensusAddressEdited"
      | "Delegated"
      | "DescriptionEdited"
      | "Initialized"
      | "MigrateFailed"
      | "MigrateSuccess"
      | "ParamChange"
      | "Paused"
      | "ProtectorChanged"
      | "Redelegated"
      | "Resumed"
      | "RewardDistributeFailed"
      | "RewardDistributed"
      | "StakeCreditInitialized"
      | "UnBlackListed"
      | "Undelegated"
      | "UnexpectedPackage"
      | "ValidatorCreated"
      | "ValidatorEmptyJailed"
      | "ValidatorJailed"
      | "ValidatorSlashed"
      | "ValidatorUnjailed"
      | "VoteAddressEdited"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BC_FUSION_CHANNELID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BREATHE_BLOCK_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEAD_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDELEGATE_FEE_RATE_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKING_CHANNELID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addToBlackList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "agentToOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blackList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "consensusExpiration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consensusToOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createValidator",
    values: [
      AddressLike,
      BytesLike,
      BytesLike,
      StakeHub.CommissionStruct,
      StakeHub.DescriptionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doubleSignSlash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "downtimeJailTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "downtimeSlash",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "downtimeSlashAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editCommissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editConsensusAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "editDescription",
    values: [StakeHub.DescriptionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "editVoteAddress",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "felonyJailTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "felonySlashAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorBasicInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorCommission",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorConsensusAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorCreditContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorDescription",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorElectionInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorRewardRecord",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorTotalPooledBNBRecord",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorVoteAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleAckPackage",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFailAckPackage",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleSynPackage",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maliciousVoteSlash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxElectedValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFelonyBetweenBreatheBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDelegationBNBChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minSelfDelegationBNB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numOfJailed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redelegate",
    values: [AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "redelegateFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromBlackList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "resume", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "syncGovToken",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unbondPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undelegate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unjail", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "updateAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParam",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteExpiration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteToOperator",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BC_FUSION_CHANNELID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BREATHE_BLOCK_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEAD_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDELEGATE_FEE_RATE_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKING_CHANNELID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentToOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blackList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consensusExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusToOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doubleSignSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "downtimeJailTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "downtimeSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "downtimeSlashAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editConsensusAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editVoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "felonyJailTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "felonySlashAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorBasicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorConsensusAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorCreditContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorElectionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorRewardRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorTotalPooledBNBRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorVoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleAckPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleFailAckPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleSynPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maliciousVoteSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxElectedValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFelonyBetweenBreatheBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDelegationBNBChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minSelfDelegationBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numOfJailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redelegateFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncGovToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbondPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unjail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteToOperator",
    data: BytesLike
  ): Result;
}

export namespace AgentChangedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    oldAgent: AddressLike,
    newAgent: AddressLike
  ];
  export type OutputTuple = [
    operatorAddress: string,
    oldAgent: string,
    newAgent: string
  ];
  export interface OutputObject {
    operatorAddress: string;
    oldAgent: string;
    newAgent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlackListedEvent {
  export type InputTuple = [target: AddressLike];
  export type OutputTuple = [target: string];
  export interface OutputObject {
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    delegator: AddressLike,
    bnbAmount: BigNumberish
  ];
  export type OutputTuple = [
    operatorAddress: string,
    delegator: string,
    bnbAmount: bigint
  ];
  export interface OutputObject {
    operatorAddress: string;
    delegator: string;
    bnbAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommissionRateEditedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    newCommissionRate: BigNumberish
  ];
  export type OutputTuple = [
    operatorAddress: string,
    newCommissionRate: bigint
  ];
  export interface OutputObject {
    operatorAddress: string;
    newCommissionRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsensusAddressEditedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    newConsensusAddress: AddressLike
  ];
  export type OutputTuple = [
    operatorAddress: string,
    newConsensusAddress: string
  ];
  export interface OutputObject {
    operatorAddress: string;
    newConsensusAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegatedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    delegator: AddressLike,
    shares: BigNumberish,
    bnbAmount: BigNumberish
  ];
  export type OutputTuple = [
    operatorAddress: string,
    delegator: string,
    shares: bigint,
    bnbAmount: bigint
  ];
  export interface OutputObject {
    operatorAddress: string;
    delegator: string;
    shares: bigint;
    bnbAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DescriptionEditedEvent {
  export type InputTuple = [operatorAddress: AddressLike];
  export type OutputTuple = [operatorAddress: string];
  export interface OutputObject {
    operatorAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigrateFailedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    delegator: AddressLike,
    bnbAmount: BigNumberish,
    respCode: BigNumberish
  ];
  export type OutputTuple = [
    operatorAddress: string,
    delegator: string,
    bnbAmount: bigint,
    respCode: bigint
  ];
  export interface OutputObject {
    operatorAddress: string;
    delegator: string;
    bnbAmount: bigint;
    respCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigrateSuccessEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    delegator: AddressLike,
    shares: BigNumberish,
    bnbAmount: BigNumberish
  ];
  export type OutputTuple = [
    operatorAddress: string,
    delegator: string,
    shares: bigint,
    bnbAmount: bigint
  ];
  export interface OutputObject {
    operatorAddress: string;
    delegator: string;
    shares: bigint;
    bnbAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParamChangeEvent {
  export type InputTuple = [key: string, value: BytesLike];
  export type OutputTuple = [key: string, value: string];
  export interface OutputObject {
    key: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectorChangedEvent {
  export type InputTuple = [
    oldProtector: AddressLike,
    newProtector: AddressLike
  ];
  export type OutputTuple = [oldProtector: string, newProtector: string];
  export interface OutputObject {
    oldProtector: string;
    newProtector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedelegatedEvent {
  export type InputTuple = [
    srcValidator: AddressLike,
    dstValidator: AddressLike,
    delegator: AddressLike,
    oldShares: BigNumberish,
    newShares: BigNumberish,
    bnbAmount: BigNumberish
  ];
  export type OutputTuple = [
    srcValidator: string,
    dstValidator: string,
    delegator: string,
    oldShares: bigint,
    newShares: bigint,
    bnbAmount: bigint
  ];
  export interface OutputObject {
    srcValidator: string;
    dstValidator: string;
    delegator: string;
    oldShares: bigint;
    newShares: bigint;
    bnbAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResumedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributeFailedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    failReason: BytesLike
  ];
  export type OutputTuple = [operatorAddress: string, failReason: string];
  export interface OutputObject {
    operatorAddress: string;
    failReason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributedEvent {
  export type InputTuple = [operatorAddress: AddressLike, reward: BigNumberish];
  export type OutputTuple = [operatorAddress: string, reward: bigint];
  export interface OutputObject {
    operatorAddress: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeCreditInitializedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    creditContract: AddressLike
  ];
  export type OutputTuple = [operatorAddress: string, creditContract: string];
  export interface OutputObject {
    operatorAddress: string;
    creditContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnBlackListedEvent {
  export type InputTuple = [target: AddressLike];
  export type OutputTuple = [target: string];
  export interface OutputObject {
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UndelegatedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    delegator: AddressLike,
    shares: BigNumberish,
    bnbAmount: BigNumberish
  ];
  export type OutputTuple = [
    operatorAddress: string,
    delegator: string,
    shares: bigint,
    bnbAmount: bigint
  ];
  export interface OutputObject {
    operatorAddress: string;
    delegator: string;
    shares: bigint;
    bnbAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnexpectedPackageEvent {
  export type InputTuple = [channelId: BigNumberish, msgBytes: BytesLike];
  export type OutputTuple = [channelId: bigint, msgBytes: string];
  export interface OutputObject {
    channelId: bigint;
    msgBytes: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorCreatedEvent {
  export type InputTuple = [
    consensusAddress: AddressLike,
    operatorAddress: AddressLike,
    creditContract: AddressLike,
    voteAddress: BytesLike
  ];
  export type OutputTuple = [
    consensusAddress: string,
    operatorAddress: string,
    creditContract: string,
    voteAddress: string
  ];
  export interface OutputObject {
    consensusAddress: string;
    operatorAddress: string;
    creditContract: string;
    voteAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorEmptyJailedEvent {
  export type InputTuple = [operatorAddress: AddressLike];
  export type OutputTuple = [operatorAddress: string];
  export interface OutputObject {
    operatorAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorJailedEvent {
  export type InputTuple = [operatorAddress: AddressLike];
  export type OutputTuple = [operatorAddress: string];
  export interface OutputObject {
    operatorAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorSlashedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    jailUntil: BigNumberish,
    slashAmount: BigNumberish,
    slashType: BigNumberish
  ];
  export type OutputTuple = [
    operatorAddress: string,
    jailUntil: bigint,
    slashAmount: bigint,
    slashType: bigint
  ];
  export interface OutputObject {
    operatorAddress: string;
    jailUntil: bigint;
    slashAmount: bigint;
    slashType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorUnjailedEvent {
  export type InputTuple = [operatorAddress: AddressLike];
  export type OutputTuple = [operatorAddress: string];
  export interface OutputObject {
    operatorAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteAddressEditedEvent {
  export type InputTuple = [
    operatorAddress: AddressLike,
    newVoteAddress: BytesLike
  ];
  export type OutputTuple = [operatorAddress: string, newVoteAddress: string];
  export interface OutputObject {
    operatorAddress: string;
    newVoteAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Stakehub extends BaseContract {
  connect(runner?: ContractRunner | null): Stakehub;
  waitForDeployment(): Promise<this>;

  interface: StakehubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BC_FUSION_CHANNELID: TypedContractMethod<[], [bigint], "view">;

  BREATHE_BLOCK_INTERVAL: TypedContractMethod<[], [bigint], "view">;

  DEAD_ADDRESS: TypedContractMethod<[], [string], "view">;

  LOCK_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  REDELEGATE_FEE_RATE_BASE: TypedContractMethod<[], [bigint], "view">;

  STAKING_CHANNELID: TypedContractMethod<[], [bigint], "view">;

  addToBlackList: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  agentToOperator: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  blackList: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  claim: TypedContractMethod<
    [operatorAddress: AddressLike, requestNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimBatch: TypedContractMethod<
    [operatorAddresses: AddressLike[], requestNumbers: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  consensusExpiration: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  consensusToOperator: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  createValidator: TypedContractMethod<
    [
      consensusAddress: AddressLike,
      voteAddress: BytesLike,
      blsProof: BytesLike,
      commission: StakeHub.CommissionStruct,
      description: StakeHub.DescriptionStruct
    ],
    [void],
    "payable"
  >;

  delegate: TypedContractMethod<
    [operatorAddress: AddressLike, delegateVotePower: boolean],
    [void],
    "payable"
  >;

  distributeReward: TypedContractMethod<
    [consensusAddress: AddressLike],
    [void],
    "payable"
  >;

  doubleSignSlash: TypedContractMethod<
    [consensusAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  downtimeJailTime: TypedContractMethod<[], [bigint], "view">;

  downtimeSlash: TypedContractMethod<
    [consensusAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  downtimeSlashAmount: TypedContractMethod<[], [bigint], "view">;

  editCommissionRate: TypedContractMethod<
    [commissionRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  editConsensusAddress: TypedContractMethod<
    [newConsensusAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  editDescription: TypedContractMethod<
    [description: StakeHub.DescriptionStruct],
    [void],
    "nonpayable"
  >;

  editVoteAddress: TypedContractMethod<
    [newVoteAddress: BytesLike, blsProof: BytesLike],
    [void],
    "nonpayable"
  >;

  felonyJailTime: TypedContractMethod<[], [bigint], "view">;

  felonySlashAmount: TypedContractMethod<[], [bigint], "view">;

  getValidatorAgent: TypedContractMethod<
    [operatorAddress: AddressLike],
    [string],
    "view"
  >;

  getValidatorBasicInfo: TypedContractMethod<
    [operatorAddress: AddressLike],
    [
      [bigint, boolean, bigint] & {
        createdTime: bigint;
        jailed: boolean;
        jailUntil: bigint;
      }
    ],
    "view"
  >;

  getValidatorCommission: TypedContractMethod<
    [operatorAddress: AddressLike],
    [StakeHub.CommissionStructOutput],
    "view"
  >;

  getValidatorConsensusAddress: TypedContractMethod<
    [operatorAddress: AddressLike],
    [string],
    "view"
  >;

  getValidatorCreditContract: TypedContractMethod<
    [operatorAddress: AddressLike],
    [string],
    "view"
  >;

  getValidatorDescription: TypedContractMethod<
    [operatorAddress: AddressLike],
    [StakeHub.DescriptionStructOutput],
    "view"
  >;

  getValidatorElectionInfo: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [
      [string[], bigint[], string[], bigint] & {
        consensusAddrs: string[];
        votingPowers: bigint[];
        voteAddrs: string[];
        totalLength: bigint;
      }
    ],
    "view"
  >;

  getValidatorRewardRecord: TypedContractMethod<
    [operatorAddress: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  getValidatorTotalPooledBNBRecord: TypedContractMethod<
    [operatorAddress: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  getValidatorVoteAddress: TypedContractMethod<
    [operatorAddress: AddressLike],
    [string],
    "view"
  >;

  getValidators: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [
      [string[], string[], bigint] & {
        operatorAddrs: string[];
        creditAddrs: string[];
        totalLength: bigint;
      }
    ],
    "view"
  >;

  handleAckPackage: TypedContractMethod<
    [channelId: BigNumberish, msgBytes: BytesLike],
    [void],
    "nonpayable"
  >;

  handleFailAckPackage: TypedContractMethod<
    [channelId: BigNumberish, msgBytes: BytesLike],
    [void],
    "nonpayable"
  >;

  handleSynPackage: TypedContractMethod<
    [arg0: BigNumberish, msgBytes: BytesLike],
    [string],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  maliciousVoteSlash: TypedContractMethod<
    [voteAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  maxElectedValidators: TypedContractMethod<[], [bigint], "view">;

  maxFelonyBetweenBreatheBlock: TypedContractMethod<[], [bigint], "view">;

  minDelegationBNBChange: TypedContractMethod<[], [bigint], "view">;

  minSelfDelegationBNB: TypedContractMethod<[], [bigint], "view">;

  numOfJailed: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  redelegate: TypedContractMethod<
    [
      srcValidator: AddressLike,
      dstValidator: AddressLike,
      shares: BigNumberish,
      delegateVotePower: boolean
    ],
    [void],
    "nonpayable"
  >;

  redelegateFeeRate: TypedContractMethod<[], [bigint], "view">;

  removeFromBlackList: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  resume: TypedContractMethod<[], [void], "nonpayable">;

  syncGovToken: TypedContractMethod<
    [operatorAddresses: AddressLike[], account: AddressLike],
    [void],
    "nonpayable"
  >;

  transferGasLimit: TypedContractMethod<[], [bigint], "view">;

  unbondPeriod: TypedContractMethod<[], [bigint], "view">;

  undelegate: TypedContractMethod<
    [operatorAddress: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;

  unjail: TypedContractMethod<
    [operatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAgent: TypedContractMethod<
    [newAgent: AddressLike],
    [void],
    "nonpayable"
  >;

  updateParam: TypedContractMethod<
    [key: string, value: BytesLike],
    [void],
    "nonpayable"
  >;

  voteExpiration: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  voteToOperator: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BC_FUSION_CHANNELID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BREATHE_BLOCK_INTERVAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEAD_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LOCK_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REDELEGATE_FEE_RATE_BASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STAKING_CHANNELID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addToBlackList"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "agentToOperator"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "blackList"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [operatorAddress: AddressLike, requestNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimBatch"
  ): TypedContractMethod<
    [operatorAddresses: AddressLike[], requestNumbers: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "consensusExpiration"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "consensusToOperator"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "createValidator"
  ): TypedContractMethod<
    [
      consensusAddress: AddressLike,
      voteAddress: BytesLike,
      blsProof: BytesLike,
      commission: StakeHub.CommissionStruct,
      description: StakeHub.DescriptionStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<
    [operatorAddress: AddressLike, delegateVotePower: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "distributeReward"
  ): TypedContractMethod<[consensusAddress: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "doubleSignSlash"
  ): TypedContractMethod<[consensusAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "downtimeJailTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "downtimeSlash"
  ): TypedContractMethod<[consensusAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "downtimeSlashAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "editCommissionRate"
  ): TypedContractMethod<[commissionRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "editConsensusAddress"
  ): TypedContractMethod<
    [newConsensusAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "editDescription"
  ): TypedContractMethod<
    [description: StakeHub.DescriptionStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "editVoteAddress"
  ): TypedContractMethod<
    [newVoteAddress: BytesLike, blsProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "felonyJailTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "felonySlashAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValidatorAgent"
  ): TypedContractMethod<[operatorAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getValidatorBasicInfo"
  ): TypedContractMethod<
    [operatorAddress: AddressLike],
    [
      [bigint, boolean, bigint] & {
        createdTime: bigint;
        jailed: boolean;
        jailUntil: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorCommission"
  ): TypedContractMethod<
    [operatorAddress: AddressLike],
    [StakeHub.CommissionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorConsensusAddress"
  ): TypedContractMethod<[operatorAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getValidatorCreditContract"
  ): TypedContractMethod<[operatorAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getValidatorDescription"
  ): TypedContractMethod<
    [operatorAddress: AddressLike],
    [StakeHub.DescriptionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorElectionInfo"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [
      [string[], bigint[], string[], bigint] & {
        consensusAddrs: string[];
        votingPowers: bigint[];
        voteAddrs: string[];
        totalLength: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorRewardRecord"
  ): TypedContractMethod<
    [operatorAddress: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorTotalPooledBNBRecord"
  ): TypedContractMethod<
    [operatorAddress: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorVoteAddress"
  ): TypedContractMethod<[operatorAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getValidators"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [
      [string[], string[], bigint] & {
        operatorAddrs: string[];
        creditAddrs: string[];
        totalLength: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleAckPackage"
  ): TypedContractMethod<
    [channelId: BigNumberish, msgBytes: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleFailAckPackage"
  ): TypedContractMethod<
    [channelId: BigNumberish, msgBytes: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleSynPackage"
  ): TypedContractMethod<
    [arg0: BigNumberish, msgBytes: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "maliciousVoteSlash"
  ): TypedContractMethod<[voteAddress: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxElectedValidators"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxFelonyBetweenBreatheBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDelegationBNBChange"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minSelfDelegationBNB"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numOfJailed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redelegate"
  ): TypedContractMethod<
    [
      srcValidator: AddressLike,
      dstValidator: AddressLike,
      shares: BigNumberish,
      delegateVotePower: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redelegateFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeFromBlackList"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resume"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "syncGovToken"
  ): TypedContractMethod<
    [operatorAddresses: AddressLike[], account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unbondPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "undelegate"
  ): TypedContractMethod<
    [operatorAddress: AddressLike, shares: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unjail"
  ): TypedContractMethod<[operatorAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAgent"
  ): TypedContractMethod<[newAgent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateParam"
  ): TypedContractMethod<[key: string, value: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteExpiration"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "voteToOperator"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getEvent(
    key: "AgentChanged"
  ): TypedContractEvent<
    AgentChangedEvent.InputTuple,
    AgentChangedEvent.OutputTuple,
    AgentChangedEvent.OutputObject
  >;
  getEvent(
    key: "BlackListed"
  ): TypedContractEvent<
    BlackListedEvent.InputTuple,
    BlackListedEvent.OutputTuple,
    BlackListedEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "CommissionRateEdited"
  ): TypedContractEvent<
    CommissionRateEditedEvent.InputTuple,
    CommissionRateEditedEvent.OutputTuple,
    CommissionRateEditedEvent.OutputObject
  >;
  getEvent(
    key: "ConsensusAddressEdited"
  ): TypedContractEvent<
    ConsensusAddressEditedEvent.InputTuple,
    ConsensusAddressEditedEvent.OutputTuple,
    ConsensusAddressEditedEvent.OutputObject
  >;
  getEvent(
    key: "Delegated"
  ): TypedContractEvent<
    DelegatedEvent.InputTuple,
    DelegatedEvent.OutputTuple,
    DelegatedEvent.OutputObject
  >;
  getEvent(
    key: "DescriptionEdited"
  ): TypedContractEvent<
    DescriptionEditedEvent.InputTuple,
    DescriptionEditedEvent.OutputTuple,
    DescriptionEditedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MigrateFailed"
  ): TypedContractEvent<
    MigrateFailedEvent.InputTuple,
    MigrateFailedEvent.OutputTuple,
    MigrateFailedEvent.OutputObject
  >;
  getEvent(
    key: "MigrateSuccess"
  ): TypedContractEvent<
    MigrateSuccessEvent.InputTuple,
    MigrateSuccessEvent.OutputTuple,
    MigrateSuccessEvent.OutputObject
  >;
  getEvent(
    key: "ParamChange"
  ): TypedContractEvent<
    ParamChangeEvent.InputTuple,
    ParamChangeEvent.OutputTuple,
    ParamChangeEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProtectorChanged"
  ): TypedContractEvent<
    ProtectorChangedEvent.InputTuple,
    ProtectorChangedEvent.OutputTuple,
    ProtectorChangedEvent.OutputObject
  >;
  getEvent(
    key: "Redelegated"
  ): TypedContractEvent<
    RedelegatedEvent.InputTuple,
    RedelegatedEvent.OutputTuple,
    RedelegatedEvent.OutputObject
  >;
  getEvent(
    key: "Resumed"
  ): TypedContractEvent<
    ResumedEvent.InputTuple,
    ResumedEvent.OutputTuple,
    ResumedEvent.OutputObject
  >;
  getEvent(
    key: "RewardDistributeFailed"
  ): TypedContractEvent<
    RewardDistributeFailedEvent.InputTuple,
    RewardDistributeFailedEvent.OutputTuple,
    RewardDistributeFailedEvent.OutputObject
  >;
  getEvent(
    key: "RewardDistributed"
  ): TypedContractEvent<
    RewardDistributedEvent.InputTuple,
    RewardDistributedEvent.OutputTuple,
    RewardDistributedEvent.OutputObject
  >;
  getEvent(
    key: "StakeCreditInitialized"
  ): TypedContractEvent<
    StakeCreditInitializedEvent.InputTuple,
    StakeCreditInitializedEvent.OutputTuple,
    StakeCreditInitializedEvent.OutputObject
  >;
  getEvent(
    key: "UnBlackListed"
  ): TypedContractEvent<
    UnBlackListedEvent.InputTuple,
    UnBlackListedEvent.OutputTuple,
    UnBlackListedEvent.OutputObject
  >;
  getEvent(
    key: "Undelegated"
  ): TypedContractEvent<
    UndelegatedEvent.InputTuple,
    UndelegatedEvent.OutputTuple,
    UndelegatedEvent.OutputObject
  >;
  getEvent(
    key: "UnexpectedPackage"
  ): TypedContractEvent<
    UnexpectedPackageEvent.InputTuple,
    UnexpectedPackageEvent.OutputTuple,
    UnexpectedPackageEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorCreated"
  ): TypedContractEvent<
    ValidatorCreatedEvent.InputTuple,
    ValidatorCreatedEvent.OutputTuple,
    ValidatorCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorEmptyJailed"
  ): TypedContractEvent<
    ValidatorEmptyJailedEvent.InputTuple,
    ValidatorEmptyJailedEvent.OutputTuple,
    ValidatorEmptyJailedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorJailed"
  ): TypedContractEvent<
    ValidatorJailedEvent.InputTuple,
    ValidatorJailedEvent.OutputTuple,
    ValidatorJailedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorSlashed"
  ): TypedContractEvent<
    ValidatorSlashedEvent.InputTuple,
    ValidatorSlashedEvent.OutputTuple,
    ValidatorSlashedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorUnjailed"
  ): TypedContractEvent<
    ValidatorUnjailedEvent.InputTuple,
    ValidatorUnjailedEvent.OutputTuple,
    ValidatorUnjailedEvent.OutputObject
  >;
  getEvent(
    key: "VoteAddressEdited"
  ): TypedContractEvent<
    VoteAddressEditedEvent.InputTuple,
    VoteAddressEditedEvent.OutputTuple,
    VoteAddressEditedEvent.OutputObject
  >;

  filters: {
    "AgentChanged(address,address,address)": TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;
    AgentChanged: TypedContractEvent<
      AgentChangedEvent.InputTuple,
      AgentChangedEvent.OutputTuple,
      AgentChangedEvent.OutputObject
    >;

    "BlackListed(address)": TypedContractEvent<
      BlackListedEvent.InputTuple,
      BlackListedEvent.OutputTuple,
      BlackListedEvent.OutputObject
    >;
    BlackListed: TypedContractEvent<
      BlackListedEvent.InputTuple,
      BlackListedEvent.OutputTuple,
      BlackListedEvent.OutputObject
    >;

    "Claimed(address,address,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "CommissionRateEdited(address,uint64)": TypedContractEvent<
      CommissionRateEditedEvent.InputTuple,
      CommissionRateEditedEvent.OutputTuple,
      CommissionRateEditedEvent.OutputObject
    >;
    CommissionRateEdited: TypedContractEvent<
      CommissionRateEditedEvent.InputTuple,
      CommissionRateEditedEvent.OutputTuple,
      CommissionRateEditedEvent.OutputObject
    >;

    "ConsensusAddressEdited(address,address)": TypedContractEvent<
      ConsensusAddressEditedEvent.InputTuple,
      ConsensusAddressEditedEvent.OutputTuple,
      ConsensusAddressEditedEvent.OutputObject
    >;
    ConsensusAddressEdited: TypedContractEvent<
      ConsensusAddressEditedEvent.InputTuple,
      ConsensusAddressEditedEvent.OutputTuple,
      ConsensusAddressEditedEvent.OutputObject
    >;

    "Delegated(address,address,uint256,uint256)": TypedContractEvent<
      DelegatedEvent.InputTuple,
      DelegatedEvent.OutputTuple,
      DelegatedEvent.OutputObject
    >;
    Delegated: TypedContractEvent<
      DelegatedEvent.InputTuple,
      DelegatedEvent.OutputTuple,
      DelegatedEvent.OutputObject
    >;

    "DescriptionEdited(address)": TypedContractEvent<
      DescriptionEditedEvent.InputTuple,
      DescriptionEditedEvent.OutputTuple,
      DescriptionEditedEvent.OutputObject
    >;
    DescriptionEdited: TypedContractEvent<
      DescriptionEditedEvent.InputTuple,
      DescriptionEditedEvent.OutputTuple,
      DescriptionEditedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MigrateFailed(address,address,uint256,uint8)": TypedContractEvent<
      MigrateFailedEvent.InputTuple,
      MigrateFailedEvent.OutputTuple,
      MigrateFailedEvent.OutputObject
    >;
    MigrateFailed: TypedContractEvent<
      MigrateFailedEvent.InputTuple,
      MigrateFailedEvent.OutputTuple,
      MigrateFailedEvent.OutputObject
    >;

    "MigrateSuccess(address,address,uint256,uint256)": TypedContractEvent<
      MigrateSuccessEvent.InputTuple,
      MigrateSuccessEvent.OutputTuple,
      MigrateSuccessEvent.OutputObject
    >;
    MigrateSuccess: TypedContractEvent<
      MigrateSuccessEvent.InputTuple,
      MigrateSuccessEvent.OutputTuple,
      MigrateSuccessEvent.OutputObject
    >;

    "ParamChange(string,bytes)": TypedContractEvent<
      ParamChangeEvent.InputTuple,
      ParamChangeEvent.OutputTuple,
      ParamChangeEvent.OutputObject
    >;
    ParamChange: TypedContractEvent<
      ParamChangeEvent.InputTuple,
      ParamChangeEvent.OutputTuple,
      ParamChangeEvent.OutputObject
    >;

    "Paused()": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProtectorChanged(address,address)": TypedContractEvent<
      ProtectorChangedEvent.InputTuple,
      ProtectorChangedEvent.OutputTuple,
      ProtectorChangedEvent.OutputObject
    >;
    ProtectorChanged: TypedContractEvent<
      ProtectorChangedEvent.InputTuple,
      ProtectorChangedEvent.OutputTuple,
      ProtectorChangedEvent.OutputObject
    >;

    "Redelegated(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      RedelegatedEvent.InputTuple,
      RedelegatedEvent.OutputTuple,
      RedelegatedEvent.OutputObject
    >;
    Redelegated: TypedContractEvent<
      RedelegatedEvent.InputTuple,
      RedelegatedEvent.OutputTuple,
      RedelegatedEvent.OutputObject
    >;

    "Resumed()": TypedContractEvent<
      ResumedEvent.InputTuple,
      ResumedEvent.OutputTuple,
      ResumedEvent.OutputObject
    >;
    Resumed: TypedContractEvent<
      ResumedEvent.InputTuple,
      ResumedEvent.OutputTuple,
      ResumedEvent.OutputObject
    >;

    "RewardDistributeFailed(address,bytes)": TypedContractEvent<
      RewardDistributeFailedEvent.InputTuple,
      RewardDistributeFailedEvent.OutputTuple,
      RewardDistributeFailedEvent.OutputObject
    >;
    RewardDistributeFailed: TypedContractEvent<
      RewardDistributeFailedEvent.InputTuple,
      RewardDistributeFailedEvent.OutputTuple,
      RewardDistributeFailedEvent.OutputObject
    >;

    "RewardDistributed(address,uint256)": TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;
    RewardDistributed: TypedContractEvent<
      RewardDistributedEvent.InputTuple,
      RewardDistributedEvent.OutputTuple,
      RewardDistributedEvent.OutputObject
    >;

    "StakeCreditInitialized(address,address)": TypedContractEvent<
      StakeCreditInitializedEvent.InputTuple,
      StakeCreditInitializedEvent.OutputTuple,
      StakeCreditInitializedEvent.OutputObject
    >;
    StakeCreditInitialized: TypedContractEvent<
      StakeCreditInitializedEvent.InputTuple,
      StakeCreditInitializedEvent.OutputTuple,
      StakeCreditInitializedEvent.OutputObject
    >;

    "UnBlackListed(address)": TypedContractEvent<
      UnBlackListedEvent.InputTuple,
      UnBlackListedEvent.OutputTuple,
      UnBlackListedEvent.OutputObject
    >;
    UnBlackListed: TypedContractEvent<
      UnBlackListedEvent.InputTuple,
      UnBlackListedEvent.OutputTuple,
      UnBlackListedEvent.OutputObject
    >;

    "Undelegated(address,address,uint256,uint256)": TypedContractEvent<
      UndelegatedEvent.InputTuple,
      UndelegatedEvent.OutputTuple,
      UndelegatedEvent.OutputObject
    >;
    Undelegated: TypedContractEvent<
      UndelegatedEvent.InputTuple,
      UndelegatedEvent.OutputTuple,
      UndelegatedEvent.OutputObject
    >;

    "UnexpectedPackage(uint8,bytes)": TypedContractEvent<
      UnexpectedPackageEvent.InputTuple,
      UnexpectedPackageEvent.OutputTuple,
      UnexpectedPackageEvent.OutputObject
    >;
    UnexpectedPackage: TypedContractEvent<
      UnexpectedPackageEvent.InputTuple,
      UnexpectedPackageEvent.OutputTuple,
      UnexpectedPackageEvent.OutputObject
    >;

    "ValidatorCreated(address,address,address,bytes)": TypedContractEvent<
      ValidatorCreatedEvent.InputTuple,
      ValidatorCreatedEvent.OutputTuple,
      ValidatorCreatedEvent.OutputObject
    >;
    ValidatorCreated: TypedContractEvent<
      ValidatorCreatedEvent.InputTuple,
      ValidatorCreatedEvent.OutputTuple,
      ValidatorCreatedEvent.OutputObject
    >;

    "ValidatorEmptyJailed(address)": TypedContractEvent<
      ValidatorEmptyJailedEvent.InputTuple,
      ValidatorEmptyJailedEvent.OutputTuple,
      ValidatorEmptyJailedEvent.OutputObject
    >;
    ValidatorEmptyJailed: TypedContractEvent<
      ValidatorEmptyJailedEvent.InputTuple,
      ValidatorEmptyJailedEvent.OutputTuple,
      ValidatorEmptyJailedEvent.OutputObject
    >;

    "ValidatorJailed(address)": TypedContractEvent<
      ValidatorJailedEvent.InputTuple,
      ValidatorJailedEvent.OutputTuple,
      ValidatorJailedEvent.OutputObject
    >;
    ValidatorJailed: TypedContractEvent<
      ValidatorJailedEvent.InputTuple,
      ValidatorJailedEvent.OutputTuple,
      ValidatorJailedEvent.OutputObject
    >;

    "ValidatorSlashed(address,uint256,uint256,uint8)": TypedContractEvent<
      ValidatorSlashedEvent.InputTuple,
      ValidatorSlashedEvent.OutputTuple,
      ValidatorSlashedEvent.OutputObject
    >;
    ValidatorSlashed: TypedContractEvent<
      ValidatorSlashedEvent.InputTuple,
      ValidatorSlashedEvent.OutputTuple,
      ValidatorSlashedEvent.OutputObject
    >;

    "ValidatorUnjailed(address)": TypedContractEvent<
      ValidatorUnjailedEvent.InputTuple,
      ValidatorUnjailedEvent.OutputTuple,
      ValidatorUnjailedEvent.OutputObject
    >;
    ValidatorUnjailed: TypedContractEvent<
      ValidatorUnjailedEvent.InputTuple,
      ValidatorUnjailedEvent.OutputTuple,
      ValidatorUnjailedEvent.OutputObject
    >;

    "VoteAddressEdited(address,bytes)": TypedContractEvent<
      VoteAddressEditedEvent.InputTuple,
      VoteAddressEditedEvent.OutputTuple,
      VoteAddressEditedEvent.OutputObject
    >;
    VoteAddressEdited: TypedContractEvent<
      VoteAddressEditedEvent.InputTuple,
      VoteAddressEditedEvent.OutputTuple,
      VoteAddressEditedEvent.OutputObject
    >;
  };
}
